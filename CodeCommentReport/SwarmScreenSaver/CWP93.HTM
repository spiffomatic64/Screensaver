<!-- saved from url=(0014)about:Swarm -->
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<TITLE>SwarmScreenSaver.ScreenSaverForm</TITLE>
<LINK REL=STYLESHEET HREF="../CommentReport.css" TYPE="text/css">
</HEAD>
<BODY topmargin=0 rightmargin=0 leftmargin=0 style="background-image: url(../titletile.jpg); background-repeat:repeat-x; background-position: 0 0;" >
<DIV CLASS="PageHeading">SwarmScreenSaver.ScreenSaverForm Class</DIV>
<DIV CLASS="Description">

This ScreenSaverForm class is a form that is responsible for going full screen with a black background and<br>
then starting the paint event which is where You should put calls to your own screensaver calls.<br>
This form monitors keyboard and mouse to determine when to quit. There is an instance of this form for <br>
all active monitors.<br>
ScreenNumber is a variable that identifys the monitor this form is working with, and is use to get the bounds <br>
aka size of the monitor resolution. It now works with multiple monitors on the same system!. <br>
I know of no other screensaver in source or out of source that has succeded in this.<br>
the Insects class is the workhorse, and does all the graphics routines called in the paint event.
<P>

</DIV>
<IMG src="../GradLeft.jpg" width=7 height=378 alt="" border="0" style="position:absolute; left:10; top:18;z-Index:2">
<IMG src="../GradTop.jpg" width=352 height=7 alt="" border="0" align="top" style="position:absolute; left:10; top:18; z-index:1">
<DIV CLASS="Remarks">
<SPAN CLASS="RemarkHdrX">Access: </SPAN>Public</DIV>
<DIV CLASS="Remarks">
<SPAN CLASS="RemarkHdrX">Base Classes: </SPAN>Form</DIV>
<TABLE CLASS="InfoTable" cellpadding=0 cellspacing=0>
<TR height=20>
<TD width=20>&nbsp;</TD>
<TD valign=top align=left width=9 bgcolor="#cccc66"><IMG SRC="../graycorner.jpg" align=top></TD>
<TD CLASS="TableLightLabel" WIDTH=206>Members</TD>
<TD CLASS="TableLightLabel" >Description</TD>
<TD width=20>&nbsp;</TD>
</TR>
<TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP103.HTM" TARGET="CNTFRAME">paintStatus</A></TD>
<TD CLASS="TableLightDesc">
-4 Screen is shutting down!
-3 Error in painting.<br></br>
-2 Unwanted paint done.<br></br>
-1 No Activity.<br></br>
 0 Paint pending.<br></br>
 1 Our paint is in Paint event.<br></br>
 2 Ready to repaint.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP104.HTM" TARGET="CNTFRAME">paintMeCalled</A></TD>
<TD CLASS="TableLightDesc">
Seems we needed more than one status variable <br></br>
for painting. One for tracking paint status and another to indicate <br></br>
that my drawing code in paint  still needs to be executed.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP105.HTM" TARGET="CNTFRAME">components</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP106.HTM" TARGET="CNTFRAME">MouseXY</A></TD>
<TD CLASS="TableLightDesc">
Contains the mouse position. If it moves, all instances os ScreenSaverFor are closed and the app is ended.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP107.HTM" TARGET="CNTFRAME">cf</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP108.HTM" TARGET="CNTFRAME">DonePaintingDel</A></TD>
<TD CLASS="TableLightDesc">
A pair of delegates this form uses to send signals accross threads to the callers.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP109.HTM" TARGET="CNTFRAME">ShuttingDownDel</A></TD>
<TD CLASS="TableLightDesc">
Inform caller that the program needs to shut down.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP110.HTM" TARGET="CNTFRAME">ScreenNumber</A></TD>
<TD CLASS="TableLightDesc">
An index into the system array of active screens on the system: Screens.AllScreens[]
so that this screen can capture the monitor size as a bounds object.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP111.HTM" TARGET="CNTFRAME">stopNow</A></TD>
<TD CLASS="TableLightDesc">
stopNow starts out as false, when it becomes true due to mouse or key actions, the form closes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP112.HTM" TARGET="CNTFRAME">SwarmCount</A></TD>
<TD CLASS="TableLightDesc">
Number of swarms per screen to show.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP113.HTM" TARGET="CNTFRAME">useStyleDoubleBuffer</A></TD>
<TD CLASS="TableLightDesc">
If true, use built-in control's double buffering. If you get InvalidOperationExceptions turn this off.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP114.HTM" TARGET="CNTFRAME">insects</A></TD>
<TD CLASS="TableLightDesc">
An array of drawing class instances. Each instance handles one swarm and one wasp.<br>
but there may be multiple swarms per screen.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP115.HTM" TARGET="CNTFRAME">memBitmap</A></TD>
<TD CLASS="TableLightDesc">
Memory resident bitmap for manual double bufferiing.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP116.HTM" TARGET="CNTFRAME">memGraphic</A></TD>
<TD CLASS="TableLightDesc">
A Grapics object for the the memory bitmap.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP117.HTM" TARGET="CNTFRAME">ScreenSaverForm</A></TD>
<TD CLASS="TableLightDesc">
Constructor for this form which is the central point for full screen drawing.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP118.HTM" TARGET="CNTFRAME">Dispose</A></TD>
<TD CLASS="TableLightDesc">
Dispose of any componants, dispose any of my dynamic objects, call base.Dispose.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP119.HTM" TARGET="CNTFRAME">ScreenSaverForm_Load</A></TD>
<TD CLASS="TableLightDesc">
Sets the size of this form to the size of the screen.<br>
then it hides the cursor. <br> 
sets this form to topmost. <br>
Informs the Insects instances of the size of the drawing area for this screen.<br>
Initializes the Insects instances. We need to do this separately. I could not do it in the constructor.<br>
The drawing objects are initialized in this load event, but are actually called in the paint event.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP120.HTM" TARGET="CNTFRAME">CloseMe</A></TD>
<TD CLASS="TableLightDesc">
 This is a centralized area, where the closing of this<br>
 form can be initiated from EntryPoints's Main method while<br>
 loop, and from inside this form itself.<br>
 It sets stopNow = true, and tells all insects instances<br>
 to stop drawing now.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP121.HTM" TARGET="CNTFRAME">OnMouseEvent</A></TD>
<TD CLASS="TableLightDesc">
OnMouseEvent. Has user moved or clicked the mouse?<br>
if so, set stopNow = true and close the form.<br>
Paint event will stop drawinig when stopNow = true<br>
and inform all insect instances to stop drawing.<br>
Initialize your drawing routines in the load event or earlier.<br>
Your drawing routines should go into the paint event.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP122.HTM" TARGET="CNTFRAME">ScreenSaverForm_KeyDown</A></TD>
<TD CLASS="TableLightDesc">
ScreenSaverForm_Keydown event. If use presses a key, close this form.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP123.HTM" TARGET="CNTFRAME">PaintMe</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP124.HTM" TARGET="CNTFRAME">PaintStatus</A></TD>
<TD CLASS="TableLightDesc">
-4 Shutting down.
-3 Error in painting!.<br></br>
-2 Unwanted paint found.<br></br>
-1 No paint activity.<br></br>
 0 Paint event is pending.<br></br>
 1 A valid paint is in Paint event.<br></br>
 2 Ready to repaint.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP126.HTM" TARGET="CNTFRAME">InitializeComponent</A></TD>
<TD CLASS="TableLightDesc">
Required method for Designer support - do not modify 
the contents of this method with the code editor.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP127.HTM" TARGET="CNTFRAME">ScreenSaverForm_Paint</A></TD>
<TD CLASS="TableLightDesc">
Here is where you actually do the drawing stuff.<br> 
In this case, EntryPoint's Main method's while loop<br>
calls Refresh to get the screen to draw.<br>
The code takes the Graphics object in the paint argument <br>
and passes it to insects, my drawing class, which draws<br>
and the while loop calls Application.DoEvents to cause<br>
the painting that was done to show on the screens.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP128.HTM" TARGET="CNTFRAME">OnPaintBackground</A></TD>
<TD CLASS="TableLightDesc">
Don't allow background to paint.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP129.HTM" TARGET="CNTFRAME">OnSizeChanged</A></TD>
<TD CLASS="TableLightDesc">
Don't allow resizing.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP130.HTM" TARGET="CNTFRAME">OnForeColorChanged</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR></TABLE>
</BODY>
</HTML>
